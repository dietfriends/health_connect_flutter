// Autogenerated from Pigeon (v16.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.balancefriends.health_connect;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Messages {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  public enum DeviceType {
    UNKNOWN(0),
    WATCH(1),
    PHONE(2),
    SCALE(3),
    RING(4),
    HMD(5),
    FIT_BAND(6),
    CHEST_STRAP(7),
    SMART_DISPLAY(8);

    final int index;

    private DeviceType(final int index) {
      this.index = index;
    }
  }

  public enum AggregationType {
    DURATION(0),
    TOTAL(1),
    MIN(2),
    MAX(3),
    AVERAGE(4),
    COUNT(5);

    final int index;

    private AggregationType(final int index) {
      this.index = index;
    }
  }

  public enum MetricField {
    /** milliseconds */
    ACTIVE_TIME(0),
    /** count */
    STEPS(1),
    /** kcal */
    TOTAL_CALORIES_BURNED(2),
    /** km */
    DISTANCE(3),
    /** km/h */
    SPEED(4),
    UNKNOWN(5);

    final int index;

    private MetricField(final int index) {
      this.index = index;
    }
  }

  public enum MetricUnit {
    COUNT(0),
    MINUTES(1),
    SECONDS(2),
    MILLISECONDS(3),
    KILO_CALORIES(4),
    KILOMETER(5),
    KILOMETERS_PER_HOUR(6),
    UNKNOWN(7);

    final int index;

    private MetricUnit(final int index) {
      this.index = index;
    }
  }

  public enum RecordType {
    ACTIVE_CALORIES_BURNED_RECORD(0),
    BASAL_BODY_TEMPERATURE_RECORD(1),
    BASAL_METABOLIC_RATE_RECORD(2),
    BLOOD_GLUCOSE_RECORD(3),
    BLOOD_PRESSURE_RECORD(4),
    BODY_FAT_RECORD(5),
    BODY_TEMPERATURE_RECORD(6),
    BODY_WATER_MASS_RECORD(7),
    BONE_MASS_RECORD(8),
    CERVICAL_MUCUS_RECORD(9),
    CYCLING_PEDALING_CADENCE_RECORD(10),
    DISTANCE_RECORD(11),
    ELEVATION_GAINED_RECORD(12),
    EXERCISE_SESSION_RECORD(13),
    FLOORS_CLIMBED_RECORD(14),
    HEART_RATE_RECORD(15),
    HEART_RATE_VARIABILITY_DIFFERENTIAL_INDEX_RECORD(16),
    HEART_RATE_VARIABILITY_RMSSD_RECORD(17),
    HEART_RATE_VARIABILITY_SD2RECORD(18),
    HEART_RATE_VARIABILITY_SDANN_RECORD(19),
    HEART_RATE_VARIABILITY_SDNN_INDEX_RECORD(20),
    HEART_RATE_VARIABILITY_SDNN_RECORD(21),
    HEART_RATE_VARIABILITY_SDSD_RECORD(22),
    HEART_RATE_VARIABILITY_SRECORD(23),
    HEART_RATE_VARIABILITY_TINN_RECORD(24),
    HEIGHT_RECORD(25),
    HIP_CIRCUMFERENCE_RECORD(26),
    HYDRATION_RECORD(27),
    INTERMENSTRUAL_BLEEDING_RECORD(28),
    LEAN_BODY_MASS_RECORD(29),
    MENSTRUATION_FLOW_RECORD(30),
    NUTRITION_RECORD(31),
    OVULATION_TEST_RECORD(32),
    OXYGEN_SATURATION_RECORD(33),
    POWER_RECORD(34),
    RESPIRATORY_RATE_RECORD(35),
    RESTING_HEART_RATE_RECORD(36),
    SEXUAL_ACTIVITY_RECORD(37),
    SLEEP_SESSION_RECORD(38),
    SLEEP_STAGE_RECORD(39),
    SPEED_RECORD(40),
    STEPS_CADENCE_RECORD(41),
    STEPS_RECORD(42),
    TOTAL_CALORIES_BURNED_RECORD(43),
    VO2MAX_RECORD(44),
    WAIST_CIRCUMFERENCE_RECORD(45),
    WEIGHT_RECORD(46),
    WHEELCHAIR_PUSHES_RECORD(47);

    final int index;

    private RecordType(final int index) {
      this.index = index;
    }
  }

  public enum HealthConnectStatus {
    NOT_SUPPORTED(0),
    NOT_INSTALLED(1),
    INSTALLED(2);

    final int index;

    private HealthConnectStatus(final int index) {
      this.index = index;
    }
  }

  public enum PermissionStatus {
    /** The user fully granted access to the requested feature. */
    GRANTED(0),
    /** The user partially granted access to the requested feature. */
    LIMITED(1),
    /** The user denied access to the requested feature, permission needs to be asked first. */
    DENIED(2),
    /**
     * The OS denied access to the requested feature.
     * The user cannot change this app's status.
     */
    RESTRICTED(3),
    /**
     * The user already denied twice.
     * Permission should be asked via setting screen
     */
    PROMPT(4);

    final int index;

    private PermissionStatus(final int index) {
      this.index = index;
    }
  }

  public enum ExerciseType {
    BACK_EXTENSION(0),
    BADMINTON(1),
    BARBELL_SHOULDER_PRESS(2),
    BASEBALL(3),
    BASKETBALL(4),
    BENCH_PRESS(5),
    BENCH_SIT_UP(6),
    BIKING(7),
    BIKING_STATIONARY(8),
    BOOT_CAMP(9),
    BOXING(10),
    BURPEE(11),
    CALISTHENICS(12),
    CRICKET(13),
    CRUNCH(14),
    DANCING(15),
    DEADLIFT(16),
    DUMBBELL_CURL_LEFT_ARM(17),
    DUMBBELL_CURL_RIGHT_ARM(18),
    DUMBBELL_FRONT_RAISE(19),
    DUMBBELL_LATERAL_RAISE(20),
    DUMBBELL_TRICEPS_EXTENSION_LEFT_ARM(21),
    DUMBBELL_TRICEPS_EXTENSION_RIGHT_ARM(22),
    DUMBBELL_TRICEPS_EXTENSION_TWO_ARM(23),
    ELLIPTICAL(24),
    EXERCISE_CLASS(25),
    FENCING(26),
    FOOTBALL_AMERICAN(27),
    FOOTBALL_AUSTRALIAN(28),
    FORWARD_TWIST(29),
    FRISBEE_DISC(30),
    GOLF(31),
    GUIDED_BREATHING(32),
    GYMNASTICS(33),
    HANDBALL(34),
    HIGH_INTENSITY_INTERVAL_TRAINING(35),
    HIKING(36),
    ICE_HOCKEY(37),
    ICE_SKATING(38),
    JUMPING_JACK(39),
    JUMP_ROPE(40),
    LAT_PULL_DOWN(41),
    LUNGE(42),
    MARTIAL_ARTS(43),
    PADDLING(44),
    PARAGLIDING(45),
    PILATES(46),
    PLANK(47),
    RACQUETBALL(48),
    ROCK_CLIMBING(49),
    ROLLER_HOCKEY(50),
    ROWING(51),
    ROWING_MACHINE(52),
    RUGBY(53),
    RUNNING(54),
    RUNNING_TREADMILL(55),
    SAILING(56),
    SCUBA_DIVING(57),
    SKATING(58),
    SKIING(59),
    SNOWBOARDING(60),
    SNOWSHOEING(61),
    SOCCER(62),
    SOFTBALL(63),
    SQUASH(64),
    SQUAT(65),
    STAIR_CLIMBING(66),
    STAIR_CLIMBING_MACHINE(67),
    STRENGTH_TRAINING(68),
    STRETCHING(69),
    SURFING(70),
    SWIMMING_OPEN_WATER(71),
    SWIMMING_POOL(72),
    TABLE_TENNIS(73),
    TENNIS(74),
    UPPER_TWIST(75),
    VOLLEYBALL(76),
    WALKING(77),
    WATER_POLO(78),
    WEIGHTLIFTING(79),
    WHEELCHAIR(80),
    OTHER_WORKOUT(81),
    YOGA(82);

    final int index;

    private ExerciseType(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ActivityRecord {
    private @NonNull String id;

    public @NonNull String getId() {
      return id;
    }

    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    private @Nullable String title;

    public @Nullable String getTitle() {
      return title;
    }

    public void setTitle(@Nullable String setterArg) {
      this.title = setterArg;
    }

    private @NonNull ExerciseId exerciseType;

    public @NonNull ExerciseId getExerciseType() {
      return exerciseType;
    }

    public void setExerciseType(@NonNull ExerciseId setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"exerciseType\" is null.");
      }
      this.exerciseType = setterArg;
    }

    private @NonNull List<AggregationMetric> metrics;

    public @NonNull List<AggregationMetric> getMetrics() {
      return metrics;
    }

    public void setMetrics(@NonNull List<AggregationMetric> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"metrics\" is null.");
      }
      this.metrics = setterArg;
    }

    private @NonNull Long begin;

    public @NonNull Long getBegin() {
      return begin;
    }

    public void setBegin(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"begin\" is null.");
      }
      this.begin = setterArg;
    }

    private @NonNull Long end;

    public @NonNull Long getEnd() {
      return end;
    }

    public void setEnd(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"end\" is null.");
      }
      this.end = setterArg;
    }

    private @Nullable Metadata metadata;

    public @Nullable Metadata getMetadata() {
      return metadata;
    }

    public void setMetadata(@Nullable Metadata setterArg) {
      this.metadata = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ActivityRecord() {}

    public static final class Builder {

      private @Nullable String id;

      @CanIgnoreReturnValue
      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }

      private @Nullable String title;

      @CanIgnoreReturnValue
      public @NonNull Builder setTitle(@Nullable String setterArg) {
        this.title = setterArg;
        return this;
      }

      private @Nullable ExerciseId exerciseType;

      @CanIgnoreReturnValue
      public @NonNull Builder setExerciseType(@NonNull ExerciseId setterArg) {
        this.exerciseType = setterArg;
        return this;
      }

      private @Nullable List<AggregationMetric> metrics;

      @CanIgnoreReturnValue
      public @NonNull Builder setMetrics(@NonNull List<AggregationMetric> setterArg) {
        this.metrics = setterArg;
        return this;
      }

      private @Nullable Long begin;

      @CanIgnoreReturnValue
      public @NonNull Builder setBegin(@NonNull Long setterArg) {
        this.begin = setterArg;
        return this;
      }

      private @Nullable Long end;

      @CanIgnoreReturnValue
      public @NonNull Builder setEnd(@NonNull Long setterArg) {
        this.end = setterArg;
        return this;
      }

      private @Nullable Metadata metadata;

      @CanIgnoreReturnValue
      public @NonNull Builder setMetadata(@Nullable Metadata setterArg) {
        this.metadata = setterArg;
        return this;
      }

      public @NonNull ActivityRecord build() {
        ActivityRecord pigeonReturn = new ActivityRecord();
        pigeonReturn.setId(id);
        pigeonReturn.setTitle(title);
        pigeonReturn.setExerciseType(exerciseType);
        pigeonReturn.setMetrics(metrics);
        pigeonReturn.setBegin(begin);
        pigeonReturn.setEnd(end);
        pigeonReturn.setMetadata(metadata);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(7);
      toListResult.add(id);
      toListResult.add(title);
      toListResult.add((exerciseType == null) ? null : exerciseType.toList());
      toListResult.add(metrics);
      toListResult.add(begin);
      toListResult.add(end);
      toListResult.add((metadata == null) ? null : metadata.toList());
      return toListResult;
    }

    static @NonNull ActivityRecord fromList(@NonNull ArrayList<Object> list) {
      ActivityRecord pigeonResult = new ActivityRecord();
      Object id = list.get(0);
      pigeonResult.setId((String) id);
      Object title = list.get(1);
      pigeonResult.setTitle((String) title);
      Object exerciseType = list.get(2);
      pigeonResult.setExerciseType((exerciseType == null) ? null : ExerciseId.fromList((ArrayList<Object>) exerciseType));
      Object metrics = list.get(3);
      pigeonResult.setMetrics((List<AggregationMetric>) metrics);
      Object begin = list.get(4);
      pigeonResult.setBegin((begin == null) ? null : ((begin instanceof Integer) ? (Integer) begin : (Long) begin));
      Object end = list.get(5);
      pigeonResult.setEnd((end == null) ? null : ((end instanceof Integer) ? (Integer) end : (Long) end));
      Object metadata = list.get(6);
      pigeonResult.setMetadata((metadata == null) ? null : Metadata.fromList((ArrayList<Object>) metadata));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ExerciseId {
    private @NonNull Long type;

    public @NonNull Long getType() {
      return type;
    }

    public void setType(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"type\" is null.");
      }
      this.type = setterArg;
    }

    private @Nullable String name;

    public @Nullable String getName() {
      return name;
    }

    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ExerciseId() {}

    public static final class Builder {

      private @Nullable Long type;

      @CanIgnoreReturnValue
      public @NonNull Builder setType(@NonNull Long setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable String name;

      @CanIgnoreReturnValue
      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }

      public @NonNull ExerciseId build() {
        ExerciseId pigeonReturn = new ExerciseId();
        pigeonReturn.setType(type);
        pigeonReturn.setName(name);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(type);
      toListResult.add(name);
      return toListResult;
    }

    static @NonNull ExerciseId fromList(@NonNull ArrayList<Object> list) {
      ExerciseId pigeonResult = new ExerciseId();
      Object type = list.get(0);
      pigeonResult.setType((type == null) ? null : ((type instanceof Integer) ? (Integer) type : (Long) type));
      Object name = list.get(1);
      pigeonResult.setName((String) name);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Metadata {
    private @NonNull String originPackageName;

    public @NonNull String getOriginPackageName() {
      return originPackageName;
    }

    public void setOriginPackageName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"originPackageName\" is null.");
      }
      this.originPackageName = setterArg;
    }

    /**
     * Optional client supplied record unique data identifier associated with the data.
     * https://developer.android.com/reference/kotlin/androidx/health/connect/client/records/metadata/Metadata?hl=ko
     */
    private @Nullable String clientRecordId;

    public @Nullable String getClientRecordId() {
      return clientRecordId;
    }

    public void setClientRecordId(@Nullable String setterArg) {
      this.clientRecordId = setterArg;
    }

    private @NonNull Long clientRecordVersion;

    public @NonNull Long getClientRecordVersion() {
      return clientRecordVersion;
    }

    public void setClientRecordVersion(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"clientRecordVersion\" is null.");
      }
      this.clientRecordVersion = setterArg;
    }

    private @NonNull Long lastModifiedTime;

    public @NonNull Long getLastModifiedTime() {
      return lastModifiedTime;
    }

    public void setLastModifiedTime(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"lastModifiedTime\" is null.");
      }
      this.lastModifiedTime = setterArg;
    }

    private @Nullable Device device;

    public @Nullable Device getDevice() {
      return device;
    }

    public void setDevice(@Nullable Device setterArg) {
      this.device = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    Metadata() {}

    public static final class Builder {

      private @Nullable String originPackageName;

      @CanIgnoreReturnValue
      public @NonNull Builder setOriginPackageName(@NonNull String setterArg) {
        this.originPackageName = setterArg;
        return this;
      }

      private @Nullable String clientRecordId;

      @CanIgnoreReturnValue
      public @NonNull Builder setClientRecordId(@Nullable String setterArg) {
        this.clientRecordId = setterArg;
        return this;
      }

      private @Nullable Long clientRecordVersion;

      @CanIgnoreReturnValue
      public @NonNull Builder setClientRecordVersion(@NonNull Long setterArg) {
        this.clientRecordVersion = setterArg;
        return this;
      }

      private @Nullable Long lastModifiedTime;

      @CanIgnoreReturnValue
      public @NonNull Builder setLastModifiedTime(@NonNull Long setterArg) {
        this.lastModifiedTime = setterArg;
        return this;
      }

      private @Nullable Device device;

      @CanIgnoreReturnValue
      public @NonNull Builder setDevice(@Nullable Device setterArg) {
        this.device = setterArg;
        return this;
      }

      public @NonNull Metadata build() {
        Metadata pigeonReturn = new Metadata();
        pigeonReturn.setOriginPackageName(originPackageName);
        pigeonReturn.setClientRecordId(clientRecordId);
        pigeonReturn.setClientRecordVersion(clientRecordVersion);
        pigeonReturn.setLastModifiedTime(lastModifiedTime);
        pigeonReturn.setDevice(device);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(originPackageName);
      toListResult.add(clientRecordId);
      toListResult.add(clientRecordVersion);
      toListResult.add(lastModifiedTime);
      toListResult.add((device == null) ? null : device.toList());
      return toListResult;
    }

    static @NonNull Metadata fromList(@NonNull ArrayList<Object> list) {
      Metadata pigeonResult = new Metadata();
      Object originPackageName = list.get(0);
      pigeonResult.setOriginPackageName((String) originPackageName);
      Object clientRecordId = list.get(1);
      pigeonResult.setClientRecordId((String) clientRecordId);
      Object clientRecordVersion = list.get(2);
      pigeonResult.setClientRecordVersion((clientRecordVersion == null) ? null : ((clientRecordVersion instanceof Integer) ? (Integer) clientRecordVersion : (Long) clientRecordVersion));
      Object lastModifiedTime = list.get(3);
      pigeonResult.setLastModifiedTime((lastModifiedTime == null) ? null : ((lastModifiedTime instanceof Integer) ? (Integer) lastModifiedTime : (Long) lastModifiedTime));
      Object device = list.get(4);
      pigeonResult.setDevice((device == null) ? null : Device.fromList((ArrayList<Object>) device));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Device {
    private @Nullable String manufacturer;

    public @Nullable String getManufacturer() {
      return manufacturer;
    }

    public void setManufacturer(@Nullable String setterArg) {
      this.manufacturer = setterArg;
    }

    private @Nullable String model;

    public @Nullable String getModel() {
      return model;
    }

    public void setModel(@Nullable String setterArg) {
      this.model = setterArg;
    }

    private @NonNull DeviceType type;

    public @NonNull DeviceType getType() {
      return type;
    }

    public void setType(@NonNull DeviceType setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"type\" is null.");
      }
      this.type = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    Device() {}

    public static final class Builder {

      private @Nullable String manufacturer;

      @CanIgnoreReturnValue
      public @NonNull Builder setManufacturer(@Nullable String setterArg) {
        this.manufacturer = setterArg;
        return this;
      }

      private @Nullable String model;

      @CanIgnoreReturnValue
      public @NonNull Builder setModel(@Nullable String setterArg) {
        this.model = setterArg;
        return this;
      }

      private @Nullable DeviceType type;

      @CanIgnoreReturnValue
      public @NonNull Builder setType(@NonNull DeviceType setterArg) {
        this.type = setterArg;
        return this;
      }

      public @NonNull Device build() {
        Device pigeonReturn = new Device();
        pigeonReturn.setManufacturer(manufacturer);
        pigeonReturn.setModel(model);
        pigeonReturn.setType(type);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(manufacturer);
      toListResult.add(model);
      toListResult.add(type == null ? null : type.index);
      return toListResult;
    }

    static @NonNull Device fromList(@NonNull ArrayList<Object> list) {
      Device pigeonResult = new Device();
      Object manufacturer = list.get(0);
      pigeonResult.setManufacturer((String) manufacturer);
      Object model = list.get(1);
      pigeonResult.setModel((String) model);
      Object type = list.get(2);
      pigeonResult.setType(DeviceType.values()[(int) type]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AggregationMetric {
    /** dataTypeName of AggregateMetric */
    private @NonNull MetricField field;

    public @NonNull MetricField getField() {
      return field;
    }

    public void setField(@NonNull MetricField setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"field\" is null.");
      }
      this.field = setterArg;
    }

    private @NonNull MetricUnit unit;

    public @NonNull MetricUnit getUnit() {
      return unit;
    }

    public void setUnit(@NonNull MetricUnit setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"unit\" is null.");
      }
      this.unit = setterArg;
    }

    private @NonNull AggregationType type;

    public @NonNull AggregationType getType() {
      return type;
    }

    public void setType(@NonNull AggregationType setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"type\" is null.");
      }
      this.type = setterArg;
    }

    private @NonNull String value;

    public @NonNull String getValue() {
      return value;
    }

    public void setValue(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"value\" is null.");
      }
      this.value = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    AggregationMetric() {}

    public static final class Builder {

      private @Nullable MetricField field;

      @CanIgnoreReturnValue
      public @NonNull Builder setField(@NonNull MetricField setterArg) {
        this.field = setterArg;
        return this;
      }

      private @Nullable MetricUnit unit;

      @CanIgnoreReturnValue
      public @NonNull Builder setUnit(@NonNull MetricUnit setterArg) {
        this.unit = setterArg;
        return this;
      }

      private @Nullable AggregationType type;

      @CanIgnoreReturnValue
      public @NonNull Builder setType(@NonNull AggregationType setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable String value;

      @CanIgnoreReturnValue
      public @NonNull Builder setValue(@NonNull String setterArg) {
        this.value = setterArg;
        return this;
      }

      public @NonNull AggregationMetric build() {
        AggregationMetric pigeonReturn = new AggregationMetric();
        pigeonReturn.setField(field);
        pigeonReturn.setUnit(unit);
        pigeonReturn.setType(type);
        pigeonReturn.setValue(value);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(field == null ? null : field.index);
      toListResult.add(unit == null ? null : unit.index);
      toListResult.add(type == null ? null : type.index);
      toListResult.add(value);
      return toListResult;
    }

    static @NonNull AggregationMetric fromList(@NonNull ArrayList<Object> list) {
      AggregationMetric pigeonResult = new AggregationMetric();
      Object field = list.get(0);
      pigeonResult.setField(MetricField.values()[(int) field]);
      Object unit = list.get(1);
      pigeonResult.setUnit(MetricUnit.values()[(int) unit]);
      Object type = list.get(2);
      pigeonResult.setType(AggregationType.values()[(int) type]);
      Object value = list.get(3);
      pigeonResult.setValue((String) value);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class RecordPermission {
    private @NonNull RecordType type;

    public @NonNull RecordType getType() {
      return type;
    }

    public void setType(@NonNull RecordType setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"type\" is null.");
      }
      this.type = setterArg;
    }

    private @NonNull Boolean readonly;

    public @NonNull Boolean getReadonly() {
      return readonly;
    }

    public void setReadonly(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"readonly\" is null.");
      }
      this.readonly = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    RecordPermission() {}

    public static final class Builder {

      private @Nullable RecordType type;

      @CanIgnoreReturnValue
      public @NonNull Builder setType(@NonNull RecordType setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable Boolean readonly;

      @CanIgnoreReturnValue
      public @NonNull Builder setReadonly(@NonNull Boolean setterArg) {
        this.readonly = setterArg;
        return this;
      }

      public @NonNull RecordPermission build() {
        RecordPermission pigeonReturn = new RecordPermission();
        pigeonReturn.setType(type);
        pigeonReturn.setReadonly(readonly);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(type == null ? null : type.index);
      toListResult.add(readonly);
      return toListResult;
    }

    static @NonNull RecordPermission fromList(@NonNull ArrayList<Object> list) {
      RecordPermission pigeonResult = new RecordPermission();
      Object type = list.get(0);
      pigeonResult.setType(RecordType.values()[(int) type]);
      Object readonly = list.get(1);
      pigeonResult.setReadonly((Boolean) readonly);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ConnectionCheckResult {
    private @NonNull HealthConnectStatus status;

    public @NonNull HealthConnectStatus getStatus() {
      return status;
    }

    public void setStatus(@NonNull HealthConnectStatus setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"status\" is null.");
      }
      this.status = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ConnectionCheckResult() {}

    public static final class Builder {

      private @Nullable HealthConnectStatus status;

      @CanIgnoreReturnValue
      public @NonNull Builder setStatus(@NonNull HealthConnectStatus setterArg) {
        this.status = setterArg;
        return this;
      }

      public @NonNull ConnectionCheckResult build() {
        ConnectionCheckResult pigeonReturn = new ConnectionCheckResult();
        pigeonReturn.setStatus(status);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(status == null ? null : status.index);
      return toListResult;
    }

    static @NonNull ConnectionCheckResult fromList(@NonNull ArrayList<Object> list) {
      ConnectionCheckResult pigeonResult = new ConnectionCheckResult();
      Object status = list.get(0);
      pigeonResult.setStatus(HealthConnectStatus.values()[(int) status]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PermissionCheckResult {
    private @NonNull PermissionStatus status;

    public @NonNull PermissionStatus getStatus() {
      return status;
    }

    public void setStatus(@NonNull PermissionStatus setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"status\" is null.");
      }
      this.status = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PermissionCheckResult() {}

    public static final class Builder {

      private @Nullable PermissionStatus status;

      @CanIgnoreReturnValue
      public @NonNull Builder setStatus(@NonNull PermissionStatus setterArg) {
        this.status = setterArg;
        return this;
      }

      public @NonNull PermissionCheckResult build() {
        PermissionCheckResult pigeonReturn = new PermissionCheckResult();
        pigeonReturn.setStatus(status);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(status == null ? null : status.index);
      return toListResult;
    }

    static @NonNull PermissionCheckResult fromList(@NonNull ArrayList<Object> list) {
      PermissionCheckResult pigeonResult = new PermissionCheckResult();
      Object status = list.get(0);
      pigeonResult.setStatus(PermissionStatus.values()[(int) status]);
      return pigeonResult;
    }
  }

  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for void API method returns. */
  public interface VoidResult {
    /** Success case callback method for handling returns. */
    void success();

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }

  private static class HealthConnectApiCodec extends StandardMessageCodec {
    public static final HealthConnectApiCodec INSTANCE = new HealthConnectApiCodec();

    private HealthConnectApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return ActivityRecord.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return AggregationMetric.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return ConnectionCheckResult.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return Device.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return ExerciseId.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return Metadata.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return PermissionCheckResult.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 135:
          return RecordPermission.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof ActivityRecord) {
        stream.write(128);
        writeValue(stream, ((ActivityRecord) value).toList());
      } else if (value instanceof AggregationMetric) {
        stream.write(129);
        writeValue(stream, ((AggregationMetric) value).toList());
      } else if (value instanceof ConnectionCheckResult) {
        stream.write(130);
        writeValue(stream, ((ConnectionCheckResult) value).toList());
      } else if (value instanceof Device) {
        stream.write(131);
        writeValue(stream, ((Device) value).toList());
      } else if (value instanceof ExerciseId) {
        stream.write(132);
        writeValue(stream, ((ExerciseId) value).toList());
      } else if (value instanceof Metadata) {
        stream.write(133);
        writeValue(stream, ((Metadata) value).toList());
      } else if (value instanceof PermissionCheckResult) {
        stream.write(134);
        writeValue(stream, ((PermissionCheckResult) value).toList());
      } else if (value instanceof RecordPermission) {
        stream.write(135);
        writeValue(stream, ((RecordPermission) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface HealthConnectApi {

    @NonNull 
    ConnectionCheckResult checkAvailability();

    void hasAllPermissions(@NonNull List<RecordPermission> expected, @NonNull Result<PermissionCheckResult> result);

    void requestPermission(@NonNull List<RecordPermission> permissions, @NonNull Result<PermissionCheckResult> result);

    void openHealthConnect(@NonNull List<RecordPermission> permissions, @NonNull Result<PermissionCheckResult> result);

    void getActivities(@NonNull Long startMillsEpoch, @NonNull Long endMillsEpoch, @NonNull Result<List<ActivityRecord>> result);

    /** The codec used by HealthConnectApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return HealthConnectApiCodec.INSTANCE;
    }
    /**Sets up an instance of `HealthConnectApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable HealthConnectApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.health_connect.HealthConnectApi.checkAvailability", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ConnectionCheckResult output = api.checkAvailability();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.health_connect.HealthConnectApi.hasAllPermissions", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                List<RecordPermission> expectedArg = (List<RecordPermission>) args.get(0);
                Result<PermissionCheckResult> resultCallback =
                    new Result<PermissionCheckResult>() {
                      public void success(PermissionCheckResult result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.hasAllPermissions(expectedArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.health_connect.HealthConnectApi.requestPermission", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                List<RecordPermission> permissionsArg = (List<RecordPermission>) args.get(0);
                Result<PermissionCheckResult> resultCallback =
                    new Result<PermissionCheckResult>() {
                      public void success(PermissionCheckResult result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.requestPermission(permissionsArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.health_connect.HealthConnectApi.openHealthConnect", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                List<RecordPermission> permissionsArg = (List<RecordPermission>) args.get(0);
                Result<PermissionCheckResult> resultCallback =
                    new Result<PermissionCheckResult>() {
                      public void success(PermissionCheckResult result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.openHealthConnect(permissionsArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.health_connect.HealthConnectApi.getActivities", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Number startMillsEpochArg = (Number) args.get(0);
                Number endMillsEpochArg = (Number) args.get(1);
                Result<List<ActivityRecord>> resultCallback =
                    new Result<List<ActivityRecord>>() {
                      public void success(List<ActivityRecord> result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getActivities((startMillsEpochArg == null) ? null : startMillsEpochArg.longValue(), (endMillsEpochArg == null) ? null : endMillsEpochArg.longValue(), resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
